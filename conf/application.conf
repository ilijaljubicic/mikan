play.crypto.secret = "WqP6rBYZvA9mrZ5rC5hn]Y2QoFTZi1?UEP@nSMagJSkDoTV`BgSlWWqJX@uo[6/E"
play.crypto.secret=${?APPLICATION_SECRET}

play.i18n.langs = ["en"]

# the host and port of this server
mikan.host = "0.0.0.0"
mikan.port = 9000
mikan.host = ${?http.address}
mikan.port = ${?http.port}

# run the server with or without a database
mikan.withdatabase = false

# the time in millisec the CPU can use to run the JavaScript filter
mikan.filter.cputime = 200

# mongodb-related settings
mongodb.name = "/orange"
mongodb.uri = "mongodb://localhost:27017"${?mongodb.name}
mongodb.uri = ${?MONGOHQ_URL}${?mongodb.name}


play.modules.enabled += "controllers.OnStartModule"

play.modules.enabled += "play.modules.reactivemongo.ReactiveMongoModule"

mongo-async-driver {
  akka {
    loglevel = WARNING
  }
}

# name the collections here
mongo.collection.accounts = "accounts"
mongo.collection.clientmsg = "clientmsg"

# Settings for the DistributedPubSub extension
# akka.cluster.pub-sub {
  # Actor name of the mediator actor, /system/distributedPubSubMediator
  #   name = distributedPubSubMediator

  # Start the mediator on members tagged with this role.
  # All members are used if undefined or empty.
  #   role = ""

  # The routing logic to use for 'Send'
  # Possible values: random, round-robin, broadcast
#  routing-logic = random
  #
  # How often the DistributedPubSubMediator should send out gossip information
  #  gossip-interval = 1s

  # Removed entries are pruned after this duration
  #  removed-time-to-live = 120s

  # Maximum number of elements to transfer in one message when synchronizing the registries.
  # Next chunk will be transferred in next round of gossip.
  #   max-delta-elements = 3000

  # The id of the dispatcher to use for DistributedPubSubMediator actors.
  # If not specified default dispatcher is used.
  # If specified you need to define the settings of the actual dispatcher.
  #   use-dispatcher = ""
  # }

akka {
  # akka logging options: OFF, ERROR, WARNING, INFO, DEBUG
  #   stdout-loglevel = "OFF"
  loglevel = OFF
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    debug {
      # enable function of LoggingReceive, which is to log any received message at DEBUG level
      receive = off
      lifecycle = off
    }
    #  serializers {
    #    java = "akka.serialization.JavaSerializer"
    #  }
    #  serialization-bindings {
    #    "messages.InternalMsg" = java
    #  }
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "localhost"
      port = 0
    }
  }

  #  cluster {
  #  seed-nodes = [
  #   "akka.tcp://application@127.0.0.1:7552"]
  #   "akka.tcp://application@127.0.0.1:2533"]
  #   "akka.tcp://application@127.0.0.1:2553"]
  # }
  extensions = ["akka.cluster.pubsub.DistributedPubSub"]
}
